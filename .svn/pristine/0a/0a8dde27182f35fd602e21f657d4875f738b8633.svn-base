/**
 * =========================================================================
 *
 * @file 指标页面下级的Demo
 * @description
 * =========================================================================
 *
 * @author linzixiong
 * @date 2016/12/8
 * @version 1.0
 * =========================================================================
 */


import React, {Component} from 'react';
import {
    StyleSheet,
    View,
    Text,
    Button,
    TouchableOpacity,
    Dimensions,
    ListView
} from 'react-native';
import Icon from 'react-native-vector-icons/Entypo'
import NavigationBar from '../../Pub/NavigationBar/NavigationBar'
import ModalDatePicker from '../../Pub/ModalDatePicker/ModalDatePicker'
import barData from './barData.json'
import Chart from '../Chart'
import form from './form.json'

const Width = Dimensions.get('window').width;
const Height = Dimensions.get('window').height;
const data = form.data;
const tabHeadData =form.tabHeadData;
let count = null;

export default class QuotaDemo2 extends Component {
    static defaultProps = {
        dataIndex: '',
        dataArray:form.data,//列表数据
        tabHeadData:form.tabHeadData,
        cellTextColor:'gray',
        tabHeadTextColor:'white'
    };

    constructor(props) {
        super(props);
        let ds = new ListView.DataSource({rowHasChanged:(row1, row2)=>row1 !== row2})
        this.state = {
            dataSource:ds.cloneWithRows(this.props.dataArray),
            acctDate: '20161212',
            selectedItem: 'bar',
            chartData: this.convertData(form),

        }
    }


    render() {
        console.log(this.state.chartData);
        console.log(this.state.acctDate);
        console.log("new data");

        return (
            <View style={styles.container}>
                {/*导航条*/}
                <NavigationBar
                    title="指标Demo"
                    rightButtonIcon="home"
                    onPressRightIcon={()=>this.props.navigator.popToTop()}
                    {...this.props}
                />
                {/*日期选择*/}
                <View style={styles.topViewStyle}>
                    <TouchableOpacity onPress={()=>{this.setState({
                        acctDate: ModalDatePicker.calcDate(this.state.acctDate, -1),
                        chartData:this.convertData(barData)
                        //selectedItem:'bar'

                    });
                    this.forceUpdate();

                    }}>
                        <Icon name='chevron-left' size={30} color="#999999"/>
                    </TouchableOpacity>

                    <ModalDatePicker
                        type='day'
                        minDate='20150101'
                        maxDate='20170101'
                        selectedValue={this.state.acctDate}
                        callbackPickerValue={(callbackPickerValue)=>this.setState({
                            acctDate: callbackPickerValue
                        })}
                        textStyle={{color: 'orange', fontSize: 20}}
                    />
                    <TouchableOpacity onPress={()=>this.setState({
                        acctDate: ModalDatePicker.calcDate(this.state.acctDate, 1),
                        selectedItem:'form'
                    })}>
                        <Icon name='chevron-right' size={30} color="#999999"/>
                    </TouchableOpacity>
                </View>
                {/* 柱状图 OR 列表图 标题*/}
                <View style={styles.titleViewStyle}>
                    {/* 柱状图 */}
                    <TouchableOpacity style={styles.barQuotaStyle} onPress={()=>this.clickOnDayQuotaItem()}>
                        <View
                            style={[styles.barQuotaStyle, {backgroundColor: this.state.selectedItem == 'bar' ? 'orange' : 'white'}]}>
                            <Text style={{color: this.state.selectedItem == 'bar' ? 'white' : 'orange'}}>柱状图</Text>
                        </View>
                    </TouchableOpacity>
                    {/* 列表图 */}
                    <TouchableOpacity style={styles.formQuotaStyle} onPress={()=>this.clickOnMonthQuotaItem()}>
                        <View
                            style={[styles.formQuotaStyle, {backgroundColor: this.state.selectedItem == 'form' ? 'orange' : 'white'}]}>
                            <Text style={{color: this.state.selectedItem == 'form' ? 'white' : 'orange'}}>列表图</Text>
                        </View>
                    </TouchableOpacity>
                </View>

                {this.renderView(this.props.navigator,this.state.chartData)}
            </View>
        );

    }

    renderView(navigator,chartData){

      if( this.state.selectedItem=='bar')
       {
           // count = this.state.acctDate;
            //this.setState({
            //    barData:this.convertData(form)
           // })
        let dataw = this.convertData(form);
        console.log("i'm in");
        console.log(chartData);
        console.log(this.state.chartData);
           return <Chart navigator={navigator} chartData={this.state.chartData}/>//{...this.props}//包含父组件的组件，如navigator
    }
        else {
           return(

               <ListView
                   dataSource={this.state.dataSource}
                   renderRow={this.renderRow.bind(this)}
                   enableEmptySections={true}
                   renderHeader={()=>this.renderHeader()}
               />
           );}

    }
    convertData(originalData){
        let chartData=new Object();
        chartData.title = originalData.title;
        chartData.type = originalData.type;
        chartData.data = [];
        chartData.yInfo = [];
        for(o in form.data){
            chartData.yInfo.push(originalData.data[o].name);
            chartData.data.push(originalData.data[o].curValue);
        }
        chartData.name = originalData.name;
        return chartData;
    }
    renderHeader(){
        return(
            <View style={styles.tabHeadStyle}>
                {this.renderTabHead()}
            </View>
        )
    }
    renderTabHead(){

        var ItemArray = [];
        var tempArray = this.props.tabHeadData;
        for (let i=0;i<tempArray.length;i++){
            ItemArray.push(
                <View key={i} style={styles.tabHeadViewStyle}>
                    <Text style={{alignItems:'center',justifyContent:'center',color:this.props.tabHeadTextColor}}>
                        {tempArray[i]}
                    </Text>
                </View>
            )
        }
        return ItemArray;
    }
    renderRow(rowData,sectionID,rowID){
        var tempColor = null;
        if (rowID%2!=0){
            tempColor = 'rgba(248,248,240,1.0)'
        }else {
            tempColor = 'white'
        }

        return(
            <TouchableOpacity onPress={()=>{alert('点击第'+rowID+'行'+tempColor)}}>
                <View style={[styles.cellStyle,{backgroundColor:tempColor}]}>
                    {this.renderCell(rowData)}
                </View>
            </TouchableOpacity>
        )
    }
    renderCell(rowData){

        var keyArray = [];
        var ItemArray = [];
        // get all Key from map
        for (var k in rowData){
            keyArray.push(k);
        }
        for (let i=0;i<tabHeadData.length;i++){
            ItemArray.push(
                <View key={i} style={[styles.cellViewStyle]}>
                    <Text style={{alignItems:'center',justifyContent:'center',color:this.props.cellTextColor}}>
                        {rowData[keyArray[i]]}
                    </Text>
                </View>
            )
        }
        return ItemArray;
    }
    componentDidMount() {
        //模拟数据获取
        let dataSource = barData;
        this.setState({
            barData: dataSource
        })
    }
    //点击日指标
    clickOnDayQuotaItem() {
        this.setState({

            selectedItem: 'bar'
        })
    }
    //点击月指标
    clickOnMonthQuotaItem() {
        this.setState({
            selectedItem: 'form'
        })
    }
    onMessage(e) {
        let data = e.nativeEvent.data;
        this.props.navigator.push({
            component: QuotaDemo2
        })
    }
}
const styles = StyleSheet.create({
    container: {
        backgroundColor: 'white',
        flex: 1
    },
    textStyle:{
        alignItems:'center',
        justifyContent:'center',
        width:Width/tabHeadData.length
    },
    tabHeadStyle:{
        alignItems:'center',
        justifyContent:'center',
        flexDirection:'row',
        height:44,
        backgroundColor:'orange'
    },
    tabHeadViewStyle:{
        alignItems:'center',
        justifyContent:'center',
        width:Width/tabHeadData.length
    },
    cellStyle:{
        alignItems:'center',
        justifyContent:'center',
        flexDirection:'row',
        height:44
    },
    cellViewStyle:{
        alignItems:'center',
        justifyContent:'center',
        width:Width/tabHeadData.length,

        height:44
    },
    topViewStyle: {
        flexDirection: 'row',
        height: 40,
        justifyContent: 'space-around',
        alignItems: 'center',
        backgroundColor: '#F7F7F7'
    },
    titleViewStyle: {
        flexDirection: 'row',
        width: Width,
        alignItems: 'center',
        justifyContent: 'center',
        height: 60
    },
    barQuotaStyle: {
        borderTopLeftRadius: 10,
        borderBottomLeftRadius: 10,
        height: 35,
        width: Width*0.45 ,
        alignItems: 'center',
        justifyContent: 'center',
        borderColor: 'orange',
        borderWidth: 1.0
    },
    formQuotaStyle: {
        borderTopRightRadius: 10,
        borderBottomRightRadius: 10,
        height: 35,
        width: Width*0.45,
        alignItems: 'center',
        justifyContent: 'center',
        borderColor: 'orange',
        borderWidth: 1.0
    },
});
